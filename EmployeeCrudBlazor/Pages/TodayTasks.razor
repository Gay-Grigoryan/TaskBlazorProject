@page "/TodayTasks"
@using EmployeeCrudBlazor.Data
@using EmployeeCrudBlazor.Models
@inject TaskService TaskService
@inject NavigationManager NavigationManager
<div class="container-fluid bg-light" style="min-height: 100vh;">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <NavLink class="nav-link" href="AddTask">
                <span class="oi oi-plus" aria-hidden="true">Add New tasks</span>
            </NavLink>
            <h1 class="text-center">Today's Tasks</h1>
            <a class="btn btn-primary position-absolute top-0 start-50 translate-middle-x mt-3" href="AddTask">Add Task</a>
            @if (TaskObj == null)
            {
                <div class="text-center mt-5">
                    <h4>Loading...</h4>
                </div>
            }
            else if (TaskObj.Count == 0)
            {
                <div class="text-center mt-5">
                    <h4>No tasks scheduled for today.</h4>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">N</th>
                                <th scope="col">Task Name</th>
                                <th scope="col">Task Description</th>
                                <th scope="col">Task Date</th>
                                <th scope="col">Task Importance</th>
                                <th scope="col">Task Category</th>
                                <th scope="col">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var task in TaskObj)
                            {
                                <tr>
                                    <td>@(TaskObj.IndexOf(task) + 1)</td>
                                    <td>@task.TaskName</td>
                                    <td>@task.TaskDescription</td>
                                    <td>@task.TaskDate.ToShortDateString()</td>
                                    <td>@task.TaskImportanceScore</td>
                                    <td>@task.TaskCategory</td>
                                    <td>
                                        @if (!task.Completed)
                                        {
                                            <button class="btn btn-success" @onclick="() => MarkCompleted(task)">Completed</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-danger" @onclick="() => MarkNotCompleted(task)">Not Completed</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    List<ToDo> TaskObj;
    protected override async Task OnInitializedAsync()
    {
        TaskObj = await TaskService.GetTasksForToday();
    }
    private async Task MarkCompleted(ToDo task)
    {
        task.Completed = true;
        await TaskService.UpdateTask(task);
    }
    private async Task MarkNotCompleted(ToDo task)
    {
        task.Completed = false;
        await TaskService.UpdateTask(task);
    }
}
